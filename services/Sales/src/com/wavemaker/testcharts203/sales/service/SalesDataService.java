/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.wavemaker.testcharts203.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.wavemaker.testcharts203.sales.*;

/**
 * Service object for domain model class SalesData.
 * @see com.wavemaker.testcharts203.sales.SalesData
 */

public interface SalesDataService {
   /**
	 * Creates a new salesdata.
	 * 
	 * @param created
	 *            The information of the created salesdata.
	 * @return The created salesdata.
	 */
	public SalesData create(SalesData created);

	/**
	 * Deletes a salesdata.
	 * 
	 * @param salesdataId
	 *            The id of the deleted salesdata.
	 * @return The deleted salesdata.
	 * @throws EntityNotFoundException
	 *             if no salesdata is found with the given id.
	 */
	public SalesData delete(Integer salesdataId) throws EntityNotFoundException;

	/**
	 * Finds all salesdatas.
	 * 
	 * @return A list of salesdatas.
	 */
	public Page<SalesData> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<SalesData> findAll(Pageable pageable);
	
	/**
	 * Finds salesdata by id.
	 * 
	 * @param id
	 *            The id of the wanted salesdata.
	 * @return The found salesdata. If no salesdata is found, this method returns
	 *         null.
	 */
	public SalesData findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a salesdata.
	 * 
	 * @param updated
	 *            The information of the updated salesdata.
	 * @return The updated salesdata.
	 * @throws EntityNotFoundException
	 *             if no salesdata is found with given id.
	 */
	public SalesData update(SalesData updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the salesdatas in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the salesdata.
	 */

	public long countAll();


    public Page<SalesData> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}


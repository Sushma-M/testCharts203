/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.wavemaker.testcharts203.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.wavemaker.testcharts203.sales.*;


/**
 * ServiceImpl object for domain model class SalesData.
 * @see com.wavemaker.testcharts203.sales.SalesData
 */
@Service("Sales.SalesDataService")
public class SalesDataServiceImpl implements SalesDataService {


    private static final Logger LOGGER = LoggerFactory.getLogger(SalesDataServiceImpl.class);

    @Autowired
    @Qualifier("Sales.SalesDataDao")
    private WMGenericDao<SalesData, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<SalesData, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "SalesTransactionManager")
     public Page<SalesData> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "SalesTransactionManager")
    @Override
    public SalesData create(SalesData salesdata) {
        LOGGER.debug("Creating a new salesdata with information: {}" , salesdata);
        return this.wmGenericDao.create(salesdata);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SalesTransactionManager")
    @Override
    public SalesData delete(Integer salesdataId) throws EntityNotFoundException {
        LOGGER.debug("Deleting salesdata with id: {}" , salesdataId);
        SalesData deleted = this.wmGenericDao.findById(salesdataId);
        if (deleted == null) {
            LOGGER.debug("No salesdata found with id: {}" , salesdataId);
            throw new EntityNotFoundException(String.valueOf(salesdataId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "SalesTransactionManager")
    @Override
    public Page<SalesData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all salesdatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "SalesTransactionManager")
    @Override
    public Page<SalesData> findAll(Pageable pageable) {
        LOGGER.debug("Finding all salesdatas");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "SalesTransactionManager")
    @Override
    public SalesData findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding salesdata by id: {}" , id);
        SalesData salesdata=this.wmGenericDao.findById(id);
        if(salesdata==null){
            LOGGER.debug("No salesdata found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return salesdata;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SalesTransactionManager")
    @Override
    public SalesData update(SalesData updated) throws EntityNotFoundException {
        LOGGER.debug("Updating salesdata with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "SalesTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


